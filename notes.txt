Notes

1) Split main csv into csvs by game
2) Handle scores for events that don't have a score
	-Need to look ahead or before for score
3)


Maybe use num timeouts left
Maybe use num team fouls

found max values


Need to do: SVC with prob=false, use decision function
Need to do: Update the actions, do by possession?


Points per Possession Values
27312 --- 29097 --- 0.9386534694298382
29290 --- 30794 --- 0.9511593167500162
14419 --- 15094 --- 0.9552802438054856
16148 --- 17137 --- 0.9422886152768862
12429 --- 12969 --- 0.9583622484385843
9715 --- 10149 --- 0.9572371662232733
8894 --- 11292 --- 0.787637265320581
6705 --- 7645 --- 0.8770438194898627

Timeout PPP
12399
11435
= 0.9222517945 //Roughly same



#-----Score change-----------
values1 = []
	values2 = []
	for t in range(240,721,40):
		for s in range(15, -15, -1):
			probs1 = classifier.predict_proba([[t  /720, s /53]])
			probs2 = classifier.predict_proba([[t /720, (s-2)/53]])
			if (probs1[0][1]- probs2[0][1]) > .1:
				values1.append([(720-t),s])
				values2.append([(720-t),s-2])
				print(str([t,s]))
				


	print(len(values1))
	t = np.arange(len(values1))
	values1 = np.array(values1)
	values2 = np.array(values2)

	plt.scatter(values1[:,0], values1[:,1], c=t, s=120, alpha=0.75, edgecolors='white')
	plt.scatter(values2[:,0], values2[:,1], c=t, s=120, alpha=0.75, edgecolors='white')
	# popt, pcov = curve_fit(func, values[:,0], values[:,1])
	# plt.plot(values[:,0], func(values[:,0], *popt), 'r-')
	plt.xlabel('4th Quarter Time')
	plt.ylabel('Point Lead')
	plt.xticks([0, 120, 240, 360, 480], ['12:00', '10:00', '8:00', '6:00', '4:00'])
	plt.xlim([0,480])
	plt.ylim([-15,15])
	plt.title('Close Games')
	plt.tight_layout()
	plt.show()








----------_PREDICT SCRIPT----------------------

# Chris Vrabel
# 5/27/17
# Prediting Game Probabilities

# This python script uses flask for communicate with our javascript.  

from flask import Flask, render_template, redirect, url_for, request
from flask import make_response
from sklearn.neighbors import KNeighborsClassifier as KNN
from sklearn.model_selection import train_test_split
from enum import Enum
import pandas as pd
import math
import classifier3
import os
import simplejson as json
import pickle


predict_script = Flask(__name__)
predict_script.debug=True

class Action(Enum):
	push = 0
	homeMake = homeTurnover = homeFoulNonS = homeFreeMakeLast = awayRebound = awayJumpBall = awayTimeout = -0.95
	awayMake = awayTurnover = awayFoulNonS = awayFreeMakeLast = homeRebound = homeJumpBall = homeTimeout = 0.95
	homeMiss = homeFreeMiss = -0.7266
	awayMiss = awayFreeMiss = 0.7266
	homeFt1 = 0.7645
	homeFt2 = 1.529
	homeFt3 = 2.294
	awayFt1 = -0.7645
	awayFt2 = -1.529
	awayFt3 = -2.294

def eventParse(event):
	if "Home Make" in str(event):
		return Action.homeMake.value
	elif "Home Miss" in str(event):
		return Action.homeMiss.value
	return 0

#Our function for best fit line 
def func(x, a, b, c):
	return a*x**2 + b*x + c

# Perform individual predictions for the top part of our page
@predict_script.route("/", methods=['GET', 'POST'])
@predict_script.route('/predict', methods=['GET', 'POST'])
def predict():
	message = None
	with open('classifier_ot_2.pkl', 'rb') as f:
		classifier = pickle.load(f)

	if request.method == 'POST':
		clock = float(request.form['myclock'])
		home = float(request.form['myhome'])
		away = float(request.form['myaway'])
		evt = request.form['myevent']
		
		event = eval("Action."+evt+".value")
		event = event * classifier3.clutchAdj(clock)
		score = home - away + event
		probs = classifier.predict_proba([[clock /720, score /53]])
		result = probs[0][1] * 100


		resp = make_response(str(result)+'%')
		resp.headers['Content-Type'] = "application/json"
		return resp

		return render_template('index.html', message='')
	return render_template('index.html', message='')


# Get the name of each game csv for our dropdown menu
@predict_script.route("/", methods=['GET', 'POST'])
@predict_script.route('/getGameIds', methods=['GET', 'POST'])
def getGameIds():
	message = None
	# files = os.listdir("games/")
	# files.sort()
	with open('game_names.pkl', 'rb') as f:
		games = pickle.load(f)
	print(games)


	if request.method == 'POST':
		files = json.dumps(games)
		resp = make_response(files)
		resp.headers['Content-Type'] = "application/json"
		return resp

		return render_template('index.html', message='')
	return render_template('index.html', message='')

# Used for the bottom of our page. Get all values within a specified probability window
@predict_script.route("/", methods=['GET', 'POST'])
@predict_script.route('/getProbWindow', methods=['GET', 'POST'])
def getProbWindow():

	with open('classifier_ot_2.pkl', 'rb') as f:
		classifier = pickle.load(f)

	if request.method == 'POST':
		lower = float(request.form['mylower'])
		upper = float(request.form['myupper'])

		values = []
		for t in range(720,-1,-10):
			for s in range(-24, 25, 1):
				probs = classifier.predict_proba([[t  /720, s /53]])
				if probs[0][1] <= upper and probs[0][1] >= lower:
					values.append([t,s,probs[0][1]])

		# values = []
		# for t in range(721,-1,-1):
		# 	probs = classifier.predict_proba([[t  /720, 1 /53]])
		# 	values.append([t,probs[0,1]])


		values = json.dumps(values)
		resp = make_response(values)
		resp.headers['Content-Type'] = "application/json"
		return resp

		return render_template('index.html', message='')
	return render_template('index.html', message='')


# Get probabilities for each event throughout a specified game
@predict_script.route("/", methods=['GET', 'POST'])
@predict_script.route('/getProbsGame', methods=['GET', 'POST'])
def getProbsGame():
	message = None

	if request.method == 'POST':
		file = request.form['myfile']
		data = pd.read_csv("games/" + file)
		# with open('classifier_ot_2.pkl',  'rb') as f:
		# 	classifier = pickle.load(f)

		predictions = []
		for i in range(0, len(data)):
			row = data.iloc[i]
			next_row = data.iloc[i+1] if (i < len(data)-1) else data.iloc[i]

			if str(row.score) != 'nan':
				home, away = classifier3.getScores(row.score) 
			else:
				pass

			if "Violation" in row.event_type or "Substitution" in row.event_type or "Ejection" in row.event_type:
				pass # Keep event the same as previous
			else:
				event = classifier3.getEvent(row, next_row)

			time = classifier3.getTime(row.play_clock)
			period = int(row.period)
			if(period > 4):
				time = time - 300
			event_adj = event*classifier3.clutchAdj(time)
			score = home - away + event_adj
			prob = classifier.predict_proba([[time  /720, score /53]])
			predictions.append([row.play_clock, home, away, str(row.home_description), str(row.away_description), prob[0][1], int(row.period)])

		preds = json.dumps(predictions)
		resp = make_response(preds)
		resp.headers['Content-Type'] = "application/json"
		return resp

		return render_template('index.html', message='')
	return render_template('index.html', message='')




if __name__ == "__main__":
	port = int(os.environ.get("PORT", 5000))
	predict_script.run(host='0.0.0.0', port=port)